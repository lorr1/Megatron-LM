import argparse
import json
from collections import Counter

import cytoolz as tz


def evaluate_abc_generation(path: str):
    # Create a Markov chain on 3 characters
    chars = list('abc')
    char_to_idx = {v: k for k, v in enumerate(chars)}
    prior_probs = [0.6, 0.2, 0.2]
    transition_probs = {
        'a': [0.3, 0.2, 0.5],
        'b': [0.4, 0.5, 0.1],
        'c': [0.05, 0.0, 0.95],
    }

    # Load data generated by a model, assumes .jsonl where each line contains one generation
    data = []
    with open(path) as f:
        for line in f:
            data.append(json.loads(line)['text'].split())
    num_seqs = len(data)

    # Estimate the prior probability i.e. the distribution over the possible first characters pr(token_0)
    learned_prior_probs = {k: v / float(num_seqs) for k, v in Counter([seq[0] for seq in data]).items()}

    # Construct a single list of all "transitions" in the generations
    # Flattens out all the generations, and makes tuples of the form (token_i, token_{i+1})
    transition_tuples = list(tz.concat([tz.sliding_window(2, seq) for seq in data]))

    # Compute the probability of being in any token i.e. pr(token)
    visitation_probs = Counter(tz.map(lambda t: t[0], transition_tuples))

    # Compute the transition probabilities i.e. pr(token_{i+1}|token_{i})
    learned_transition_probs = Counter(transition_tuples)
    # (normalize by the token visitation counts)
    learned_transition_probs = {k: v / float(visitation_probs[k[0]]) for k, v in learned_transition_probs.items()}

    # Print everything out
    # TODO(karan): just output some summary divergence
    for char in chars:
        print(f"Character: {char}")
        print(f"-- true prior: {prior_probs[char_to_idx[char]]:.2f}")
        print(f"-- learned prior: {learned_prior_probs[char]:.2f}")
        for other_char in chars:
            print(f"-- true transition -> {other_char}: {transition_probs[char][char_to_idx[other_char]]:.2f}")
            try:
                print(f"-- learned transition -> {other_char}: {learned_transition_probs[(char, other_char)]:.2f}")
            except:
                print(f"-- learned transition -> {other_char}: 0.0")


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Synthetic dataset.')
    parser.add_argument('--dataset', type=str, choices=['abc'], help='Name of dataset.', default='abc')
    parser.add_argument('--input_file', type=str, help='Name of input file containing generations.', required=True)

    args = parser.parse_args()

    if args.dataset == 'abc':
        evaluate_abc_generation(path=args.input_file)
    else:
        raise NotImplementedError
